site:
  email: "[firstname.lastname]@univ-nantes.fr"
  description: TermSuite is a toolbox for <strong>terminology extraction</strong> and <strong>multilingual term alignment</strong>.
  title: TermSuite

authors:
  dcram:
    description: "CNRS Research Engineer - University of Nantes - Project ISTEX"
    role: "Engineer"
    link_type: "Github"
  bdaille:
    description: "CNRS Research Engineer - University of Nantes - Project ISTEX"
    role: "Researcher"
    link_type: "Personal Page"


global:
  french: French
  english: English
  latvian: Latvian
  russian: Russian
  italian: Italian
  german: German
  spanish: Spanish
  danish: Danish
  chinese: Chinese
  newsletter: Newsletter
  poor: Poor
  good: Good
  download: Download
  changelog: Change log
  getting_started: Getting Started
  documentation: Documentation
  developers: Developers
  user_manual: User Manual
  view_on_github: View on Github
  about: About
  about_termsuite: About TermSuite
  blog: Blog
  contact: Contact
  support: Support
  links: Links
  university_of_nantes: University of Nantes
  fork_termsuite_on_github: Fork TermSuite on GitHub.
  toggle_nav: Toggle navigation
  share_on: Share on
  library: Library
  download_gui:
    linux: Download TermSuite Graphical User Interface for Linux
    windows: Download TermSuite Graphical User Interface for Windows
    macos: Download TermSuite Graphical User Interface for Mac OS X

newsletter:
  subscribe: Subscribe to Newsletter
  desc: "Sign up and receive the latest news about TermSuite:"
  submit: submit
  email: your@email.com
  email_body: Sending this email as it is will make you subscribe to TermSuite newsletter within hours.

index:
  current_version: "Current version of TermSuite is"
  good_support: Good support
  partial_support: Partial support
  main_features: >
    Multiword and compound term detection, morphosyntactic analysis, term variant detection,
     term specificity computation, etc. <small><a href="#features">See features</a></small>

  download_last_stable: Download last stable version of TermSuite.
  see_changelog: See Changelog
  download_last_snapshot: or download last development snapshot
  get_it_running: Get it running
  get_it_running_desc: Prepare your system for TermSuite, download, install and get it running on an example corpus quickly.
  documentation_desc: List of all TermSuite's features, analysis engines, and configuration parameters. Java API.
  developers_desc: Build it from sources with Gradle, or use it as a maven dependency.
  features_overview: Features Overview
  language_support: Language Support
  java_api_title: Java API
  java_api_overview: Embed TermSuite within your Java applications.
  command_line_api_title: Command Line
  command_line_api_overview: NLP preprocessing, terminology extraction, and multilingual alignment from command line.
  gui_title: Graphical User Interface
  gui_overview: A graphical user interface for terminology extraction, multilingual alignment, in-context term occurrence viewer, linguistic resource editor.
  gui_tutorial: Tutorial
  downloads: Download

contact:
  description: TermSuite is a research project.
  address: Email
  address_description: Please contact us at the following address for any question about TermSuite
  members: Team
  members_description: You can also contact any member of the team directly.


features:
  word_tokenization: Word tokenization
  postagging: "POS Tagging (3rd party: with TreeTagger or Mate)"
  lemmatization: "Lemmatization (3rd party: with TreeTagger or Mate)"
  stemming: Stemming (Snowball)
  terminology_extraction: Terminology extraction
  mwt_detection: Efficient multiword term detection
  syntactic_variant_detection: Term syntactic variants detection
  graphical_variant_detection: Term graphic variants detection
  semantic_variant_detection: Term semantic variants detection
  pref_deriv_variant_detection: Variant detection based on term derivations and term prefixation
  morphology: Term morphology extraction
  morphosyntactic_variant_detection: Term morphosyntactic variants detection
  specificity: "Term specificity (Weirdness Ratio) computing and other term measures: WR log, term frequency, etc"
  alignment: Term alignment (distributional and compositional, multilingual and monolingual)
  export: "Terminology export in multiple formats: `json`, `tsv`, `tbx`"

filtering_properties:
  rank: the rank of the term after the terminology has been scored and sort by specificity
  pilot: the most frequent form of term
  frequency: the number of occurrences of a term
  fnorm: the normalized frequency
  generalFnorm: the general normalized frequency
  dfreq: the number of document in corpus that contain the term
  lemma: the concatenation of word lemmas
  groupingKey: the term grouping key, i.e. the term <emph>id</emph> (pattern + lemma)
  wr: the weirdness ratio (the specificity)
  wrLog: the log of weirdness ratio
  specificity: the specificity of a term, i.e. the log of its weirdness ratio
  pattern: the syntactic pattern of the term
  spottingRule: the <emph>UIMA Tokens Regex</emph> rule name that spotted the term

title:
  blog: Blog & News
  introduction: Presentation
  getting-started-cmd: "Tutorial: Getting Started with terminology extraction"
  gui: "Graphical User Interface (GUI)"
  postagger: "Installing the POS tagger and lemmatizer"
  command-line-api: Run terminology extraction from command line API
  java-api: TermSuite Java API
  resources: Language resources for TermSuite
  corpus: Corpus directory structure for TermSuite
  term-properties: Term Properties
  developers: Developers instructions (Gradle / Maven)
  support: Support
  data-model: Our Data Model for Terminologies
  about: About TermSuite
  properties: Properties
  contact: Contact
  tsv-output: Configuring and Understanding TSV Output Terminologies.
  termsuite-pipelines: TermSuite terminology extraction and alignment pipelines
  alignment: Bilingual alignment
  terminology-extraction: Terminology Extraction
  json: Terminology JSON Serialization
  resources-yaml-variants: YAML Variation Rules
  post-processing: Post-processings applied to extracted terminologies
  java-terminology-extractor: Running Terminology Extraction with Java API
  java-preprocessor: Running NLP Preprocessing with Java API
  java-aligner: Running Bilingual Alignment with Java API
  java-io: Exporting and Deserializing terminologies with Java API
  java-navigate-model: Navigating the IndexedCorpus
  bilingual-dictionary: Bilingual Dictionary

menu-title:
  introduction: Presentation
  getting-started: Getting started with terminology extraction
  gui: Graphical User Interface
  command-line-api: Command Line API
  java-api: Java API
  resources: Linguistic Resources
  corpus: Corpus
  tsv-output: TSV Output
  properties: Properties
  data-model: Data Model
  postprocessing: Post-Processing
  pipeline: Terminology Extraction Pipeline
  links: Links
  data-model: Data Model
  terminology-extractor-cli: TerminologyExtractorCLI
  preprocessor-cli: PreprocessorCLI
  aligner-cli: AlignerCLI
  theory: Theory and Architecture
  support: Support
  developers: Developers
  alignment: Alignment
  postagger: Installing a POS Tagger
  termsuite-pipelines: Pipelines
  terminology-extraction: Termino Extraction
  json: JSON Serialization
  resources-yaml-variants: Variation Rules (YAML)
  post-processing: Post-processings
  java-terminology-extractor: TerminoExtractor
  java-preprocessor: Preprocessor
  java-aligner: Aligner
  java-io: IO Serialization
  java-navigate-model: Navigating the IndexedCorpus
  bilingual-dictionary: Bilingual Dictionary

topmenu:
  getting-started: Introduction
  gui: Graphical User Interface
  command-line-api: Command Line API
  java-api: Java API
  resources: Linguistic Resources
  corpus: Corpus
  support: Support
  io: "Input/Output Formats"
  theory: Theory
  links: Links

excerpt:
  blog: Latest news about TermSuite
  introduction: "User manual and technical documentation for TermSuite : terminology extraction and bilingual alignment."
  getting-started: "This page guides you through the steps to get TermSuite running and extracting the terminology from a short example corpus."
  gui: "This page explains how to get running with TermSuite Graphical User Interface."
  postagger: "Documentation on installing TreeTagger or Mate POS tagger for TermSuite."
  command-line-api: Documentation on running TermSuite terminology extraction and bilingual alignment from command line.
  java-api: Documentation on running TermSuite terminology extraction and bilingual alignment from Java API.
  resources: List and documentation of linguistics resources needed by TermSuite.
  corpus: Documentation on preparing your corpus for TermSuite.
  term-properties: This page lists and explains the most important term properties in TermSuite, and how they are used in the terminology extraction process.
  properties: Documentation on all term and relation properties in TermSuite.
  developers: "Information about TermSuite for developers: Gradle, Github, Maven..."
  support: You need help with TermSuite ?
  data-model: Terminology Graph-Based Data Model
  changelog: "Changelog, new features, and bug fixes of TermSuite"
  contact: "Contact information of TermSuite contributors."
  terminology-extractor-cli: "Documention of command TerminologyExtractorCLI for terminology extraction."
  preprocessor-cli: "Documention of command TerminologyExtractorCLI for NLP preprocessing (tokenizing, POS-tagging, lemmatization, multi-word term spotting)."
  aligner-cli: "Documention of command AlignerCLI for bilingual alignment."
  tsv-output: Configuring and understanding TermSuite TSV output for terminologies.
  termsuite-pipelines: Explanation of TermSuite pipelines for terminology extraction and multi-word term alignments.
  alignment: Explanation on how TermSuite translates domain-specific multi-word terms in comparable corpus.
  terminology-extraction: Explanation on how TermSuite produces a terminology out of a domain-specific textual corpus.
  json: Understanding terminology JSON serialization format
  resources-yaml-variants: Documentation on TermSuite's linguistic resource for term variation gatherer gathering.
  post-processing: Documentation on all post-processings (scores and filtering) applied to extracted terminologies by TermSuite
  java-terminology-extractor: Documentation on how to run terminology extraction with TermSuite Java API
  java-preprocessor: Documentation on how to run NLP preprocessing with TermSuite Java API
  java-aligner: Documentation on how to run bilingual alignment with TermSuite Java API
  java-io: Documentation on exporting and deserializing terminologies with Java API to JSON, TSV and TBX
  java-navigate-model: Understanding ans navigating in IndexedCorpus, java terminologies and term occurrence
  bilingual-dictionary: Bilingual Dictionary

authors:
  dc:
    description: "CNRS Research Engineer - University of Nantes - Project ISTEX"
    role: Engineer
    link_type: Github
  bd:
    description: Professor in  Computer Sciences at the University of Nantes - France
    role: Researcher
    link_type: Personal page
